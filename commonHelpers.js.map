{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\nimport SimpleLightbox from 'simplelightbox';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nexport async function doFetch(query, page = 1) {\n  const API_KEY = '43499454-4c7e954d404e5474a5c884b10';\n  const BASE_URL = 'https://pixabay.com/api/';\n  const IMAGE_TYPE = 'photo';\n  const ORIENTATION = 'horizontal';\n  const SAFESEARCH = 'true';\n  const PER_PAGE = 15;\n\n  try {\n    const response = await axios.get(BASE_URL, {\n      params: {\n        key: API_KEY,\n        q: query,\n        image_type: IMAGE_TYPE,\n        orientation: ORIENTATION,\n        safesearch: SAFESEARCH,\n        page: currentPage,\n        per_page: PER_PAGE,\n      },\n    });\n\n    const { data } = response;\n    const { hits: images, totalHits } = data;\n\n    if (!Array.isArray(images) || images.length === 0) {\n      throw new Error('No images found');\n    }\n\n    return { images, totalHits };\n  } catch (error) {\n    throw new Error('Failed to fetch images');\n  }\n}","import SimpleLightbox from 'simplelightbox';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\n\nconst gallery = document.querySelector('.gallery');\nconst loaderContainer = document.querySelector('.loader');\nlet lightbox = new SimpleLightbox('.gallery a');\n\nexport function renderImages(images) {\n  const imageHTML = images\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        downloads,\n        comments,\n        views,\n      }) => {\n        return `<li class=\"gallery-item\">\n              <a href=\"${largeImageURL}\" class=\"gallery-link\"><img class=\"gallery-img\" src=\"${webformatURL}\" alt=\"${tags}\" data-source=\"${largeImageURL}\" title=\"${tags}\" /></a>\n              <div class=\"activity\">\n              <h3>Likes<p class=\"activity-item\">${likes}</p></h3>\n              <h3>Views<p class=\"activity-item\">${views}</p></h3>\n              <h3>Comments<p class=\"activity-item\">${comments}</p></h3>\n              <h3>Downloads<p class=\"activity-item\">${downloads}</p></div></h3>\n          </li>`;\n      }\n    )\n    .join('');\n\n  gallery.insertAdjacentHTML('beforeend', imageHTML);\n\n  lightbox.refresh();\n  loaderContainer.style.display = 'none';\n}\n\nexport function showErrorToast(message) {\n  iziToast.error({\n    title: 'Ошибка',\n    message,\n    position: 'topRight',\n  });\n  loaderContainer.style.display = 'none';\n}","import { doFetch } from './js/pixabay-api.js';\nimport { renderImages, showErrorToast, createMarkup } from './js/render-functions.js';\nimport './css/styles.css';\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\nimport iziToast from 'izitoast';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst refs = {\n  searchForm: document.querySelector('.search-form'),\n  inputText: document.querySelector('input[name=\"searchQuery\"]'),\n  gallery: document.querySelector('.gallery'),\n  loadMoreBtn: document.querySelector('.load-more'),\n};\n\nlet page = 1;\n\nrefs.loadMoreBtn.style.display = 'none';\nrefs.searchForm.addEventListener('submit', onSubmit);\nrefs.loadMoreBtn.addEventListener('click', onLoadMore);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  page = 1;\n\n  refs.gallery.innerHTML = '';\n\n  const name = refs.inputText.value.trim();\n\n  if (name !== '') {\n    instance(name);\n  } else {\n    refs.loadMoreBtn.style.display = 'none';\n    return Notiflix.Notify.failure(\n      'Sorry, there are no images matching your search query. Please try again.'\n    );\n  }\n}\n\nfunction onLoadMore() {\n  const name = refs.inputText.value.trim();\n\n  page += 1;\n\n  instance(name, page);\n}\n\nasync function instance(name, page) {\n  try {\n    const data = await doFetch(name, page);\n    notification(data.hits.length, data.totalHits);\n    createItems(data.hits);\n  } catch (error) {\n    refs.loadMoreBtn.style.display = 'none';\n    Notiflix.Notify.info(\n      \"We're sorry, but you've reached the end of search results.\"\n    );\n  }\n}\n\nfunction createItems(photos) {\n  const markup = photos\n    .map(\n      item => `<a class =\"photo-link\" href=\"${item.largeImageURL}\">\n    <div class=\"photo-card\">\n        <div class=\"photo\">\n     <img src=\"${item.webformatURL}\" alt=\"${item.tags}\" loading=\"lazy\"/>\n        </div>\n     <div class=\"info\">\n       <p class=\"info-item\">\n         <b>Likes: ${item.likes}</b>\n       </p>\n       <p class=\"info-item\">\n         <b>Views: ${item.views}</b>\n       </p>\n       <p class=\"info-item\">\n         <b>Comments: ${item.comments}</b>\n       </p>\n       <p class=\"info-item\">\n         <b>Downloads: ${item.downloads}</b>\n       </p>\n     </div>\n     </div>\n   </a>`\n    )\n    .join('');\n\n  refs.gallery.insertAdjacentHTML('beforeend', markup);\n\n  simpleLightbox.refresh();\n}\n\nconst simpleLightbox = new SimpleLightbox('.gallery a', {\n  captionsData: 'alt',\n  captionDelay: 250,\n});\n\nfunction notification(length, totalHits) {\n  if (length === 0) {\n    Notiflix.Notify.failure(\n      'Sorry, there are no images matching your search query. Please try again.'\n    );\n    return;\n  }\n\n  if (page === 1) {\n    refs.loadMoreBtn.style.display = 'flex';\n\n    Notiflix.Notify.success(`Hooray! We found ${totalHits} images.`);\n  }\n\n  if (page >= Math.ceil(totalHits / 15)) {\n    refs.loadMoreBtn.style.display = 'none';\n    Notiflix.Notify.info(\n      \"We're sorry, but you've reached the end of search results.\"\n    );\n  }\n}"],"names":["doFetch","query","page","API_KEY","BASE_URL","IMAGE_TYPE","ORIENTATION","SAFESEARCH","response","axios","data","images","totalHits","SimpleLightbox","refs","onSubmit","onLoadMore","e","name","instance","Notiflix","notification","createItems","photos","markup","item","simpleLightbox","length"],"mappings":"owBAMO,eAAeA,EAAQC,EAAOC,EAAO,EAAG,CAC7C,MAAMC,EAAU,qCACVC,EAAW,2BACXC,EAAa,QACbC,EAAc,aACdC,EAAa,OAGnB,GAAI,CACF,MAAMC,EAAW,MAAMC,EAAM,IAAIL,EAAU,CACzC,OAAQ,CACN,IAAKD,EACL,EAAGF,EACH,WAAYI,EACZ,YAAaC,EACb,WAAYC,EACZ,KAAM,YACN,SAAU,EACX,CACP,CAAK,EAEK,CAAE,KAAAG,CAAM,EAAGF,EACX,CAAE,KAAMG,EAAQ,UAAAC,CAAS,EAAKF,EAEpC,GAAI,CAAC,MAAM,QAAQC,CAAM,GAAKA,EAAO,SAAW,EAC9C,MAAM,IAAI,MAAM,iBAAiB,EAGnC,MAAO,CAAE,OAAAA,EAAQ,UAAAC,EAClB,MAAe,CACd,MAAM,IAAI,MAAM,wBAAwB,CACzC,CACH,CChCgB,SAAS,cAAc,UAAU,EACzB,SAAS,cAAc,SAAS,EACzC,IAAIC,EAAe,YAAY,ECC9C,MAAMC,EAAO,CACX,WAAY,SAAS,cAAc,cAAc,EACjD,UAAW,SAAS,cAAc,2BAA2B,EAC7D,QAAS,SAAS,cAAc,UAAU,EAC1C,YAAa,SAAS,cAAc,YAAY,CAClD,EAEA,IAAIZ,EAAO,EAEXY,EAAK,YAAY,MAAM,QAAU,OACjCA,EAAK,WAAW,iBAAiB,SAAUC,CAAQ,EACnDD,EAAK,YAAY,iBAAiB,QAASE,CAAU,EAErD,SAASD,EAASE,EAAG,CACnBA,EAAE,eAAc,EAEhBf,EAAO,EAEPY,EAAK,QAAQ,UAAY,GAEzB,MAAMI,EAAOJ,EAAK,UAAU,MAAM,KAAI,EAEtC,GAAII,IAAS,GACXC,EAASD,CAAI,MAEb,QAAAJ,EAAK,YAAY,MAAM,QAAU,OAC1BM,EAAS,OAAO,QACrB,0EACN,CAEA,CAEA,SAASJ,GAAa,CACpB,MAAME,EAAOJ,EAAK,UAAU,MAAM,KAAI,EAEtCZ,GAAQ,EAERiB,EAASD,EAAMhB,CAAI,CACrB,CAEA,eAAeiB,EAASD,EAAMhB,EAAM,CAClC,GAAI,CACF,MAAMQ,EAAO,MAAMV,EAAQkB,EAAMhB,CAAI,EACrCmB,EAAaX,EAAK,KAAK,OAAQA,EAAK,SAAS,EAC7CY,EAAYZ,EAAK,IAAI,CACtB,MAAe,CACdI,EAAK,YAAY,MAAM,QAAU,OACjCM,EAAS,OAAO,KACd,4DACN,CACG,CACH,CAEA,SAASE,EAAYC,EAAQ,CAC3B,MAAMC,EAASD,EACZ,IACCE,GAAQ,gCAAgCA,EAAK,aAAa;AAAA;AAAA;AAAA,iBAG/CA,EAAK,YAAY,UAAUA,EAAK,IAAI;AAAA;AAAA;AAAA;AAAA,qBAIhCA,EAAK,KAAK;AAAA;AAAA;AAAA,qBAGVA,EAAK,KAAK;AAAA;AAAA;AAAA,wBAGPA,EAAK,QAAQ;AAAA;AAAA;AAAA,yBAGZA,EAAK,SAAS;AAAA;AAAA;AAAA;AAAA,QAKlC,EACA,KAAK,EAAE,EAEVX,EAAK,QAAQ,mBAAmB,YAAaU,CAAM,EAEnDE,EAAe,QAAO,CACxB,CAEA,MAAMA,EAAiB,IAAIb,EAAe,aAAc,CACtD,aAAc,MACd,aAAc,GAChB,CAAC,EAED,SAASQ,EAAaM,EAAQf,EAAW,CACvC,GAAIe,IAAW,EAAG,CAChBP,EAAS,OAAO,QACd,0EACN,EACI,MACD,CAEGlB,IAAS,IACXY,EAAK,YAAY,MAAM,QAAU,OAEjCM,EAAS,OAAO,QAAQ,oBAAoBR,CAAS,UAAU,GAG7DV,GAAQ,KAAK,KAAKU,EAAY,EAAE,IAClCE,EAAK,YAAY,MAAM,QAAU,OACjCM,EAAS,OAAO,KACd,4DACN,EAEA"}